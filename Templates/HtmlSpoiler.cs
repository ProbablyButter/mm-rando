// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace MMRando.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using MMRando.Extensions;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class HtmlSpoiler : HtmlSpoilerBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write(@"
<html>
<head>
<style>
    body.dark-mode {
      background-color: #111;
      color: #ccc;
    }
    body.dark-mode a {
      color: #111;
    }
    body.dark-mode button {
      background-color: #ddd;
      color: #111;
    }

    body.light-mode {
      background-color: #eee;
      color: #111;
    }
    body.light-mode a {
      color: #111;
    }
    body.light-mode button {
      background-color: #111;
      color: #ccc;
    }

    th{ text-align:left }
    .region { text-align: center; font-weight: bold; }
    [data-content]:before { content: attr(data-content); }

	.dark-mode .spoiler{ background-color:#ccc }
	.dark-mode .spoiler:hover { background-color: #111;  }
	.dark-mode .show-highlight .unavailable .newlocation { background-color: #500705; }
	.dark-mode .show-highlight .acquired .newlocation { background-color: #69591f; }
	.dark-mode .show-highlight .available .newlocation { background-color: #313776; }

	.light-mode .spoiler{ background-color:#111 }
	.light-mode .spoiler:hover { background-color: #ccc;  }
	.light-mode .show-highlight .unavailable .newlocation { background-color: #FF9999; }
	.light-mode .show-highlight .acquired .newlocation { background-color: #99FF99; }
	.light-mode .show-highlight .available .newlocation { background-color: #9999FF; }


    #spoilerLogState { width: 560px; }
</style>
</head>
<body class=""light-mode"">
<label><b>Version: </b></label><span>");
            this.Write(this.ToStringHelper.ToStringWithCulture(spoiler.Version));
            this.Write("</span><br/>\n<label><b>Settings String: </b></label><span>");
            this.Write(this.ToStringHelper.ToStringWithCulture(spoiler.SettingsString));
            this.Write("</span><br/>\n<label><b>Seed: </b></label><span>");
            this.Write(this.ToStringHelper.ToStringWithCulture(spoiler.Seed));
            this.Write("</span><br/>\n");
 if (spoiler.CustomItemListString != null) { 
            this.Write("\n<label><b>Custom Item List: </b></label><span>");
            this.Write(this.ToStringHelper.ToStringWithCulture(spoiler.CustomItemListString));
            this.Write("</span><br/>\n");
 } 
            this.Write("\n");
 if (spoiler.CustomStartingItemListString != null) { 
            this.Write("\n<label><b>Custom Starting Item List: </b></label><span>");
            this.Write(this.ToStringHelper.ToStringWithCulture(spoiler.CustomStartingItemListString));
            this.Write("</span><br/>\n");
 } 
            this.Write("\n<br/>\n<button type=\"button\" onclick=\"toggleDarkLight()\" title=\"Toggle dark/light" +
                    " mode\">Toggle Dark Theme</button>\n<br/>\n<br/>\n<label><b>Spoiler Log State: </b><" +
                    "/label><input id=\"spoilerLogState\" type=\"text\"/><br/>\n");
 if (spoiler.RandomizeDungeonEntrances) { 

            this.Write("\n<h2>Dungeon Entrance Replacements</h2>\n<table border=\"1\" class=\"item-replacement" +
                    "s\">\n\t<tr>\n\t\t<th>Entrance</th>\n\t    <th></th>\n\t\t<th>New Destination</th>\n\t</tr>\n");
		 for (int i = 0; i < 4; i++) {
            var entrance = spoiler.Entrances[i];
            var destination = spoiler.Entrances[spoiler.NewDestinationIndices[i]];
            this.Write("\n\t<tr data-id=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture((int)destination));
            this.Write("\" data-newlocationid=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture((int)destination));
            this.Write("\" class=\"unavailable\">\n\t\t<td class=\"newlocation\">");
            this.Write(this.ToStringHelper.ToStringWithCulture(entrance.Entrance()));
            this.Write("</td>\n\t    <td><input type=\"checkbox\"/></td>\n\t\t<td class=\"spoiler itemname\"><span" +
                    " data-content=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(destination.Entrance()));
            this.Write("\"></span></td>\n\t</tr>\n");
 } 
            this.Write("\n</table>\n");
 } 
            this.Write("\n<h2>Item Replacements</h2>\n<input type=\"checkbox\" id=\"highlight-checks\"/> Highli" +
                    "ght available checks\n<table border=\"1\" class=\"item-replacements\">\n <tr>\n     <th" +
                    ">Location</th>\n\t <th></th>\n     <th></th>\n </tr>\n");
 foreach (var region in spoiler.ItemList.GroupBy(item => item.Region).OrderBy(g => g.Key)) {

            this.Write("\n <tr class=\"region\"><td colspan=\"3\">");
            this.Write(this.ToStringHelper.ToStringWithCulture(region.Key));
            this.Write("</td></tr>\n ");
 foreach (var item in region.OrderBy(item => item.NewLocationName)) { 
            this.Write("\n <tr data-id=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Id));
            this.Write("\" data-newlocationid=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.NewLocationId));
            this.Write("\" class=\"unavailable\">\n\t<td class=\"newlocation\">");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.NewLocationName));
            this.Write("</td>\n\t<td><input type=\"checkbox\"/></td>\n\t<td class=\"spoiler itemname\"> <span dat" +
                    "a-content=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            this.Write("\"></span></td>\n </tr>\n ");
 } 
            this.Write("\n");
 } 
            this.Write("\n</table>\n<h2>Item Locations</h2>\n<table border=\"1\" id=\"item-locations\">\n <tr>\n  " +
                    "   <th>Item</th>\n\t <th></th>\n     <th>Location</th>\n </tr>\n");
 foreach (var item in spoiler.ItemList.Where(item => !item.IsJunk)) {

            this.Write("\n <tr data-id=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Id));
            this.Write("\" data-newlocationid=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.NewLocationId));
            this.Write("\">\n\t<td>");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            this.Write("</td>\n\t<td><input type=\"checkbox\"/></td>\n\t<td class=\"spoiler newlocation\"> <span " +
                    "data-content=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(item.NewLocationName));
            this.Write("\"></span></td>\n </tr>\n");
 } 
            this.Write("\n</table>\n");
 if (spoiler.GossipHints != null && spoiler.GossipHints.Any()) { 

            this.Write("\n<h2>Gossip Stone Hints</h2>\n<table border=\"1\">\n\t<tr>\n\t\t<th>Gossip Stone</th>\n\t\t<" +
                    "th>Message</th>\n\t</tr>\n");
	foreach (var hint in spoiler.GossipHints.OrderBy(h => h.Key.ToString())) { 

            this.Write("\n\t<tr>\n\t\t<td>");
            this.Write(this.ToStringHelper.ToStringWithCulture(hint.Key));
            this.Write("</td>\n\t\t<td class=\"spoiler\"><span data-content=\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(hint.Value));
            this.Write("\"></span></td>\n\t</tr>\n");
 } 
            this.Write("\n</table>\n");
 } 
            this.Write("\n<script>\n\tfunction all(list, predicate) {\n\t\tfor (var i = 0; i < list.length; i++" +
                    ") {\n\t\t\tif (!predicate(list[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n" +
                    "\tfunction any(list, predicate) {\n\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\tif" +
                    " (predicate(list[i])) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n    \n    va" +
                    "r segmentSize = 16;\n    function saveItems() {\n        var segments = [];\n      " +
                    "  for (var i = 0; i < logic.length; i++) {\n            var segmentIndex = parseI" +
                    "nt(i / segmentSize);\n            segments[segmentIndex] = segments[segmentIndex]" +
                    " || 0;\n            if (logic[i].Checked) {\n                segments[parseInt(i /" +
                    " segmentSize)] += (1 << (i%segmentSize));\n            }\n        }\n        var sa" +
                    "veString = segments.map(function(s) {\n            return s.toString(16);\n       " +
                    " }).join(\"-\");\n        var saveInput = document.querySelector(\"#spoilerLogState\"" +
                    ");\n        saveInput.value = saveString;\n    }\n\n    function loadItems() {\n     " +
                    "   var saveInput = document.querySelector(\"#spoilerLogState\");\n        var segme" +
                    "nts = saveInput.value.split(\"-\");\n        if (Math.ceil((logic.length - 1) / seg" +
                    "mentSize) !== segments.length) {\n            alert(\"Invalid Spoiler Log state\");" +
                    "\n            return;\n        }\n        segments = segments.map(function(segment)" +
                    " {\n            return parseInt(segment, 16);\n        });\n        for (var i = 0;" +
                    " i < segments.length; i++) {\n            var segment = segments[i];\n            " +
                    "for (var j = 0; j < segmentSize; j++) {\n                var itemIndex = segmentS" +
                    "ize * i + j;\n                if (itemIndex < logic.length) {\n                   " +
                    " var mark = ((segment >> j) % 2 == 1);\n                    logic[itemIndex].Chec" +
                    "ked = mark;\n                    var itemRow = document.querySelector(\"tr[data-ne" +
                    "wlocationid=\'\" + itemIndex + \"\']\");\n                    if (itemRow) {\n\t        " +
                    "            logic[itemRow.dataset.id].Acquired = mark;\n                    } els" +
                    "e {\n\t                    logic[itemIndex].Acquired = mark;\n                    }" +
                    "\n                }\n            }\n        }\n\t\trecalculateItems();\n    }\n\n    docu" +
                    "ment.querySelector(\"#spoilerLogState\").addEventListener(\"keypress\", function(eve" +
                    "nt) {\n        if (event.keyCode === 13) {\n            loadItems();\n        }\n   " +
                    " });\n\n\tfunction recalculateItems() {\n\t\tvar recalculate = false;\n\t\tfor (var i = 0" +
                    "; i < logic.length; i++) {\n\t\t\tvar item = logic[i];\n\t\t\titem.IsAvailable = \n\t\t\t\t(i" +
                    "tem.RequiredItemIds === null || all(item.RequiredItemIds, function(id) { return " +
                    "logic[id].Acquired; }))\n\t\t\t\t&& \n\t\t\t\t(item.ConditionalItemIds === null || any(ite" +
                    "m.ConditionalItemIds, function(conditionals) { return all(conditionals, function" +
                    "(id) { return logic[id].Acquired; }); }));\n            \n\t\t\tif (!item.Acquired &&" +
                    " item.IsFakeItem && item.IsAvailable) {\n\t\t\t\titem.Acquired = true;\n\t\t\t\trecalculat" +
                    "e = true;\n\t\t\t}\n\t\t\tif (item.Acquired && item.IsFakeItem && !item.IsAvailable) {\n\t" +
                    "\t\t\titem.Acquired = false;\n\t\t\t\trecalculate = true;\n\t\t\t}\n        \n\t\t\tvar locationR" +
                    "ow = document.querySelector(\".item-replacements tr[data-newlocationid=\'\" + i + \"" +
                    "\']\");\n\t\t\tif (locationRow) {\n\t\t\t\tlocationRow.className = \"\";\n\t\t\t\tlocationRow.clas" +
                    "sList.add(item.IsAvailable ? \"available\" : \"unavailable\");\n\t\t\t\tvar itemName = lo" +
                    "cationRow.querySelector(\".itemname\");\n                var checkbox = locationRow" +
                    ".querySelector(\"input\");\n                checkbox.checked = item.Checked;\n\t\t\t\tif" +
                    " (item.Checked) {\n\t\t\t\t\titemName.classList.remove(\"spoiler\");\n\t\t\t\t} else {\n\t\t\t\t\ti" +
                    "temName.classList.add(\"spoiler\");\n\t\t\t\t}\n\t\t\t}\n        \n\t\t\tvar itemRow = document." +
                    "querySelector(\"#item-locations tr[data-id=\'\" + i + \"\']\");\n\t\t\tif (itemRow) {\n\t\t\t\t" +
                    "var itemName = itemRow.querySelector(\".newlocation\");\n                var checkb" +
                    "ox = itemRow.querySelector(\"input\");\n                checkbox.checked = item.Acq" +
                    "uired;\n\t\t\t\tif (item.Acquired) {\n\t\t\t\t\titemName.classList.remove(\"spoiler\");\n\t\t\t\t}" +
                    " else {\n\t\t\t\t\titemName.classList.add(\"spoiler\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (recalculate" +
                    ") {\n\t\t\trecalculateItems();\n\t\t} else {\n            saveItems();\n        }\n\t}\n\n   " +
                    " var logic = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(spoiler.LogicJson));
            this.Write(";\n\n    for (var i = 0; i < logic.length; i++) {\n        var item = logic[i];\n    " +
                    "    if (item.Acquired) {\n            item.Checked = true;\n\t        document.quer" +
                    "ySelector(\"tr[data-newlocationid=\'\" + i + \"\'] input\").checked = true;\n        }\n" +
                    "    }\n\n    var startingLocations = [0, 94, 274, 275, 276, 277];\n    for (var id " +
                    "of startingLocations) {\n\t    logic[id].Checked = true;\n\t    logic[document.query" +
                    "Selector(\"tr[data-newlocationid=\'\" + id + \"\']\").dataset.id].Acquired = true;\n\t  " +
                    "  document.querySelector(\"tr[data-newlocationid=\'\" + id + \"\'] input\").checked = " +
                    "true;\n    }\n\n\trecalculateItems();\n\n\tvar rows = document.querySelectorAll(\"tr\");\n" +
                    "\tfor (var i = 1; i < rows.length; i++) {\n\t\tvar row = rows[i];\n\t\tvar checkbox = r" +
                    "ow.querySelector(\"input\");\n\t\tif (checkbox) {\n\t\t\tcheckbox.addEventListener(\"click" +
                    "\", function(e) {\n\t\t\t\tvar row = e.target.closest(\"tr\");\n                var rowId" +
                    " = parseInt(row.dataset.id);\n\t\t\t\tvar newLocationId = parseInt(row.dataset.newloc" +
                    "ationid);\n\t\t\t\tlogic[newLocationId].Checked = e.target.checked;\n                l" +
                    "ogic[rowId].Acquired = e.target.checked;\n\t\t\t\trecalculateItems();\n\t\t\t});\n\t\t}\n\t}\n\n" +
                    "\tdocument.querySelector(\"#highlight-checks\").addEventListener(\"click\", function(" +
                    "e) {\n        var tables = document.querySelectorAll(\"table.item-replacements\");\n" +
                    "        for (var i = 0; i < tables.length; i++) {\n            if (e.target.check" +
                    "ed) {\n                tables[i].classList.add(\"show-highlight\");\n            } e" +
                    "lse {\n                tables[i].classList.remove(\"show-highlight\");\n            " +
                    "}\n        }\n\t});\n\n    function toggleDarkLight() {\n\t    var body = document.getE" +
                    "lementsByTagName(\'body\')[0];\n\t    var currentClassBody = body.className;\n\t    bo" +
                    "dy.className = currentClassBody === \"dark-mode\" ? \"light-mode\" : \"dark-mode\";\n  " +
                    "  }\n</script>\n</body>\n</html>");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class HtmlSpoilerBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
